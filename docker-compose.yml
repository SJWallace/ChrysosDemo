services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  dbt:
      image: ghcr.io/dbt-labs/dbt-postgres:1.6.0
      volumes:
        - ./dbt_project:/usr/app
        - ~/.dbt_project:/root/.dbt
      working_dir: /usr/app
      environment:
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      entrypoint: ["tail", "-f", "/dev/null"]
      depends_on:
        postgres:
          condition: service_healthy
      healthcheck:
        test: ["CMD", "ls", "/usr/app"]
        interval: 10s
        timeout: 5s
        retries: 5

  postgres:
    image: postgres:17.5
    environment:
      POSTGRES_USER: chrysosdemo
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: chrysosdemo
    ports:
      - "54321:5432"
    volumes:
      - ./database/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U chrysosdemo" ]
      interval: 10s
      timeout: 5s
      retries: 5

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./grafana/dashboards/grafana_dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml:ro
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-producer_temp:
    build:
      context: ./kafka_services
    volumes:
      - ./kafka_services/producer:/app
    command: python sim_Temperature.py
    depends_on:
      kafka:
        condition: service_healthy
    restart: on-failure
    environment:
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: ["CMD-SHELL", "python -c \"from confluent_kafka import Producer; p = Producer({'bootstrap.servers': 'kafka:9092'}); p.flush(timeout=1.0)\""]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-producer_photon_assay:
    build:
      context: ./kafka_services
    volumes:
      - ./kafka_services/producer:/app
    command: python sim_PhotonAssay.py
    depends_on:
      kafka:
        condition: service_healthy
    restart: on-failure
    environment:
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: ["CMD-SHELL", "python -c \"from confluent_kafka import Producer; p = Producer({'bootstrap.servers': 'kafka:9092'}); p.flush(timeout=1.0)\""]
      interval: 10s
      timeout: 5s
      retries: 5


  kafka-consumer_temp:
    build:
      context: ./kafka_services
    volumes:
      - ./kafka_services/consumer:/app
    command: python temperature_consumer.py
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: on-failure
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: ["CMD-SHELL", "python -c \"from confluent_kafka import Consumer; from psycopg2 import connect; c = Consumer({'bootstrap.servers': 'kafka:9092', 'group.id': 'healthcheck', 'session.timeout.ms': 6000}); c.close(); conn = connect(dbname='chrysosdemo', user='chrysosdemo', password='${POSTGRES_PASSWORD}', host='postgres', port='5432'); conn.close()\""]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-consumer_photon_assay:
    build:
      context: ./kafka_services
    volumes:
      - ./kafka_services/consumer:/app
    command: python photon_assay_consumer.py
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: on-failure
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: ["CMD-SHELL", "python -c \"from confluent_kafka import Consumer; from psycopg2 import connect; c = Consumer({'bootstrap.servers': 'kafka:9092', 'group.id': 'healthcheck', 'session.timeout.ms': 6000}); c.close(); conn = connect(dbname='chrysosdemo', user='chrysosdemo', password='${POSTGRES_PASSWORD}', host='postgres', port='5432'); conn.close()\""]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  grafana-data:
  postgres-data:
